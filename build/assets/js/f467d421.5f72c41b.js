"use strict";(self.webpackChunkpanorah_documentation=self.webpackChunkpanorah_documentation||[]).push([[403],{667:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>a,toc:()=>o});var s=t(4848),i=t(8453);const c={title:"Fetching Data",sidebar_position:3},r="Fetching Data from a DocType",a={id:"tutorial/fetch_data",title:"Fetching Data",description:"This section explains the backend processes, schemas, and functions involved in fetching data from a DocType in the Panorah Framework. There are two methods for fetching data:",source:"@site/docs/tutorial/fetch_data.md",sourceDirName:"tutorial",slug:"/tutorial/fetch_data",permalink:"/docs/tutorial/fetch_data",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial/fetch_data.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Fetching Data",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Inserting Data",permalink:"/docs/tutorial/insert_to_doctype"},next:{title:"Deleting a Document",permalink:"/docs/tutorial/delete_document"}},d={},o=[{value:"Backend Schemas Used",id:"backend-schemas-used",level:2},{value:"<strong>1. <code>ConditionDictSchema</code></strong>",id:"1-conditiondictschema",level:3},{value:"<strong>2. <code>DataFetchResponseSchema</code></strong>",id:"2-datafetchresponseschema",level:3},{value:"Fetch Data",id:"fetch-data",level:2},{value:"<strong>Backend Functionality</strong>",id:"backend-functionality",level:3},{value:"<strong>1. <code>DocTypeController.fetch_table_data()</code></strong>",id:"1-doctypecontrollerfetch_table_data",level:4},{value:"<strong>2. <code>DynamicDataOperation.fetch_data()</code></strong>",id:"2-dynamicdataoperationfetch_data",level:4},{value:"<strong>3. <code>DynamicDataOperation.build_tree()</code></strong>",id:"3-dynamicdataoperationbuild_tree",level:4},{value:"<strong>Example Payload for Fetching Data</strong>",id:"example-payload-for-fetching-data",level:3}];function l(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"fetching-data-from-a-doctype",children:"Fetching Data from a DocType"})}),"\n",(0,s.jsxs)(n.p,{children:["This section explains the backend processes, schemas, and functions involved in fetching data from a ",(0,s.jsx)(n.strong,{children:"DocType"})," in the ",(0,s.jsx)(n.strong,{children:"Panorah Framework"}),". There are two methods for fetching data:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fetch Table Data"}),": Retrieves data based on specified conditions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fetch Data by ID"}),": Retrieves a single record by its unique ID."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"backend-schemas-used",children:"Backend Schemas Used"}),"\n",(0,s.jsx)(n.h3,{id:"1-conditiondictschema",children:(0,s.jsxs)(n.strong,{children:["1. ",(0,s.jsx)(n.code,{children:"ConditionDictSchema"})]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),":",(0,s.jsx)(n.br,{}),"\n","Defines the structure for specifying conditions when fetching data."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fields"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"condition_dict"})}),": A dictionary of field-value pairs for filtering records."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-datafetchresponseschema",children:(0,s.jsxs)(n.strong,{children:["2. ",(0,s.jsx)(n.code,{children:"DataFetchResponseSchema"})]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),":",(0,s.jsx)(n.br,{}),"\n","Defines the structure of the response when fetching data."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fields"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"status"})}),": Indicates success or failure."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"message"})}),": Describes the outcome."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"data"})}),": Contains the fetched records as a list of dictionaries or a single dictionary."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"fetch-data",children:"Fetch Data"}),"\n",(0,s.jsx)(n.h3,{id:"backend-functionality",children:(0,s.jsx)(n.strong,{children:"Backend Functionality"})}),"\n",(0,s.jsx)(n.h4,{id:"1-doctypecontrollerfetch_table_data",children:(0,s.jsxs)(n.strong,{children:["1. ",(0,s.jsx)(n.code,{children:"DocTypeController.fetch_table_data()"})]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),":",(0,s.jsx)(n.br,{}),"\n","Retrieves multiple records from a table (DocType) based on specified conditions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key Steps"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Extracts the ",(0,s.jsx)(n.code,{children:"table_name"})," and ",(0,s.jsx)(n.code,{children:"condition_dict"})," from the request."]}),"\n",(0,s.jsxs)(n.li,{children:["Resolves the ORM model for the ",(0,s.jsx)(n.code,{children:"table_name"})," using ",(0,s.jsx)(n.code,{children:"PiccoloHelper.get_table_class()"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["If the DocType is hierarchical (",(0,s.jsx)(n.code,{children:"is_tree"}),"), it calls ",(0,s.jsx)(n.code,{children:"DynamicDataOperation.build_tree()"})," to fetch hierarchical data."]}),"\n",(0,s.jsxs)(n.li,{children:["Applies filters based on the ",(0,s.jsx)(n.code,{children:"condition_dict"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Returns the fetched records in the ",(0,s.jsx)(n.code,{children:"DataFetchResponseSchema"})," format."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"2-dynamicdataoperationfetch_data",children:(0,s.jsxs)(n.strong,{children:["2. ",(0,s.jsx)(n.code,{children:"DynamicDataOperation.fetch_data()"})]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),":",(0,s.jsx)(n.br,{}),"\n","Handles the core logic for fetching records from the database."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key Responsibilities"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Retrieves the metadata and fields for the specified ",(0,s.jsx)(n.code,{children:"table_name"})," using ",(0,s.jsx)(n.code,{children:"MetaDataService.get_table_fields()"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Processes conditions in the ",(0,s.jsx)(n.code,{children:"condition_dict"})," to build database filters."]}),"\n",(0,s.jsxs)(n.li,{children:["For hierarchical DocTypes (",(0,s.jsx)(n.code,{children:"is_tree"}),"), builds a tree structure starting from the specified parent node using ",(0,s.jsx)(n.code,{children:"DynamicDataOperation.build_tree()"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"3-dynamicdataoperationbuild_tree",children:(0,s.jsxs)(n.strong,{children:["3. ",(0,s.jsx)(n.code,{children:"DynamicDataOperation.build_tree()"})]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),":",(0,s.jsx)(n.br,{}),"\n","Recursively builds a hierarchical tree structure for ",(0,s.jsx)(n.code,{children:"is_tree"})," DocTypes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Role in Fetching"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Fetches child records for each node and nests them under their parent nodes."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-payload-for-fetching-data",children:(0,s.jsx)(n.strong,{children:"Example Payload for Fetching Data"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "table_name": "Invoice",\r\n  "condition_dict": {\r\n    "name": "CRI-11-78"\r\n  }\r\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(6540);const i={},c=s.createContext(i);function r(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);