"use strict";(self.webpackChunkpanorah_documentation=self.webpackChunkpanorah_documentation||[]).push([[292],{8459:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>d,toc:()=>c});var i=s(4848),r=s(8453);const t={title:"Filtering and Sorting",sidebar_position:6},l="Filtering and Sorting",d={id:"tutorial/filter_sort",title:"Filtering and Sorting",description:"This section explains the backend processes, schemas, and functions involved in applying filters and sorting while fetching data from a DocType in the Panorah Framework.",source:"@site/docs/tutorial/filter_sort.md",sourceDirName:"tutorial",slug:"/tutorial/filter_sort",permalink:"/docs/tutorial/filter_sort",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial/filter_sort.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Filtering and Sorting",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Updating a Document",permalink:"/docs/tutorial/update_doc"},next:{title:"Upload Files",permalink:"/docs/tutorial/file_upload"}},o={},c=[{value:"Example Payload",id:"example-payload",level:2},{value:"Explanation of the Payload",id:"explanation-of-the-payload",level:2},{value:"filters",id:"filters",level:3},{value:"sort",id:"sort",level:3},{value:"limit",id:"limit",level:3},{value:"offset",id:"offset",level:3},{value:"Backend Schemas Used",id:"backend-schemas-used",level:2},{value:"<strong>1. <code>FilterRequestSchema</code></strong>",id:"1-filterrequestschema",level:3},{value:"<strong>2. <code>FilterFetchResponseSchema</code></strong>",id:"2-filterfetchresponseschema",level:3},{value:"Backend Functions Used",id:"backend-functions-used",level:2},{value:"<strong>1. <code> DocTypeController.filter_data()</code></strong>",id:"1--doctypecontrollerfilter_data",level:3},{value:"<strong>2. <code>DynamicDataOperation.filter_data()</code></strong>",id:"2-dynamicdataoperationfilter_data",level:3},{value:"<strong>3. <code>DynamicDataOperation.apply_sorting()</code></strong>",id:"3-dynamicdataoperationapply_sorting",level:3}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"filtering-and-sorting",children:"Filtering and Sorting"})}),"\n",(0,i.jsxs)(n.p,{children:["This section explains the backend processes, schemas, and functions involved in applying ",(0,i.jsx)(n.strong,{children:"filters"})," and ",(0,i.jsx)(n.strong,{children:"sorting"})," while fetching data from a ",(0,i.jsx)(n.strong,{children:"DocType"})," in the ",(0,i.jsx)(n.strong,{children:"Panorah Framework"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"example-payload",children:"Example Payload"}),"\n",(0,i.jsxs)(n.p,{children:["To filter and sort data from a ",(0,i.jsx)(n.strong,{children:"DocType"}),", you need to send a JSON payload in the following format:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\r\n  "table_name": "",\r\n  "filters": [\r\n    {"field": " ", "value":  , "action": " "}\r\n  ],\r\n  "sort": {\r\n    "field": " ",\r\n    "order": " "\r\n  },\r\n  "limit": 10,\r\n  "offset": 0\r\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"explanation-of-the-payload",children:"Explanation of the Payload"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"table_name"}),"\r\nThe name of the DocType (table) to apply filtering and sorting."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"filters",children:"filters"}),"\n",(0,i.jsx)(n.p,{children:"A list of conditions to filter the data. You can include multiple filter conditions."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Attributes"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"field"})}),": The name of the field to apply the filter on."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"value"})}),": The value to compare against."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"action"})}),": The comparison operator for the filter."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Supported Actions"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"equals"})}),": Matches records where the field value equals the given value."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"not_equals"})}),": Matches records where the field value does not equal the given value."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"like"})}),": Matches records where the field value contains the given substring."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"not_like"})}),": Matches records where the field value does not contain the given substring."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"in"})}),": Matches records where the field value is within a list of values."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"not_in"})}),": Matches records where the field value is not within a list of values."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"is"})}),": Matches records where the field value is null."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"not_is"})}),": Matches records where the field value is not null."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"<"})}),": Matches records where the field value is less than the given value."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"<="})}),": Matches records where the field value is less than or equal to the given value."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:">"})}),": Matches records where the field value is greater than the given value."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:">="})}),": Matches records where the field value is greater than or equal to the given value."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"sort",children:"sort"}),"\n",(0,i.jsx)(n.p,{children:"Specifies the field and order to sort the results."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Attributes"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"field"})}),": The name of the field to sort on."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"order"})}),': The sorting order, either "asc" (ascending) or "desc" (descending).']}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"limit",children:"limit"}),"\n",(0,i.jsx)(n.p,{children:"The maximum number of records to fetch. Default is 10"}),"\n",(0,i.jsx)(n.h3,{id:"offset",children:"offset"}),"\n",(0,i.jsx)(n.p,{children:"The number of records to skip before starting to fetch. Default is 0"}),"\n",(0,i.jsx)(n.h2,{id:"backend-schemas-used",children:"Backend Schemas Used"}),"\n",(0,i.jsx)(n.h3,{id:"1-filterrequestschema",children:(0,i.jsxs)(n.strong,{children:["1. ",(0,i.jsx)(n.code,{children:"FilterRequestSchema"})]})}),"\n",(0,i.jsx)(n.p,{children:"Validates the filtering and sorting request payload."}),"\n",(0,i.jsx)(n.h3,{id:"2-filterfetchresponseschema",children:(0,i.jsxs)(n.strong,{children:["2. ",(0,i.jsx)(n.code,{children:"FilterFetchResponseSchema"})]})}),"\n",(0,i.jsx)(n.p,{children:"Defines the structure of the response after applying filtering and sorting."}),"\n",(0,i.jsx)(n.h2,{id:"backend-functions-used",children:"Backend Functions Used"}),"\n",(0,i.jsx)(n.h3,{id:"1--doctypecontrollerfilter_data",children:(0,i.jsxs)(n.strong,{children:["1. ",(0,i.jsx)(n.code,{children:" DocTypeController.filter_data()"})]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),":\r\nOrchestrates the filtering and sorting operation."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Key Responsibilities"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Validates the request using ",(0,i.jsx)(n.code,{children:"FilterRequestSchema"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Delegates the filtering logic to ",(0,i.jsx)(n.code,{children:"DynamicDataOperation.filter_data()"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-dynamicdataoperationfilter_data",children:(0,i.jsxs)(n.strong,{children:["2. ",(0,i.jsx)(n.code,{children:"DynamicDataOperation.filter_data()"})]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),":\r\nExecutes the filtering and sorting query on the database."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Key Responsibilities"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Resolves the ORM model for the specified table_name using ",(0,i.jsx)(n.code,{children:"PiccoloHelper.get_table_class()"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Iterates through the filters to build database conditions."}),"\n",(0,i.jsxs)(n.li,{children:["Applies the sorting configuration using ",(0,i.jsx)(n.code,{children:"DynamicDataOperation.apply_sorting()"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Fetches data from the database with the specified ",(0,i.jsx)(n.code,{children:"limit"})," and ",(0,i.jsx)(n.code,{children:"offset"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-dynamicdataoperationapply_sorting",children:(0,i.jsxs)(n.strong,{children:["3. ",(0,i.jsx)(n.code,{children:"DynamicDataOperation.apply_sorting()"})]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),":\r\nAdds sorting logic to the database query."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Key Responsibilities"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Validates the field in the sort configuration to ensure it exists in the DocType schema."}),"\n",(0,i.jsx)(n.li,{children:"Applies the sorting order (asc or desc) to the query."}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>d});var i=s(6540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);