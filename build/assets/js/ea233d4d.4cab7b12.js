"use strict";(self.webpackChunkpanorah_documentation=self.webpackChunkpanorah_documentation||[]).push([[165],{402:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>o});var t=s(4848),d=s(8453);const i={title:"Updating a Document",sidebar_position:5},r="Updating a Document",a={id:"tutorial/update_doc",title:"Updating a Document",description:"This section explains the backend processes, schemas, and functions involved in updating a document (record) in a DocType in the Panorah Framework.",source:"@site/docs/tutorial/update_doc.md",sourceDirName:"tutorial",slug:"/tutorial/update_doc",permalink:"/docs/tutorial/update_doc",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial/update_doc.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Updating a Document",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Deleting a Document",permalink:"/docs/tutorial/delete_document"},next:{title:"Filtering and Sorting",permalink:"/docs/tutorial/filter_sort"}},c={},o=[{value:"Backend Schemas Used",id:"backend-schemas-used",level:2},{value:"<strong>1. <code>UpdateDataRequestSchema</code></strong>",id:"1-updatedatarequestschema",level:3},{value:"<strong>2. <code>DataFetchResponseSchema</code></strong>",id:"2-datafetchresponseschema",level:3},{value:"Backend Functions Used",id:"backend-functions-used",level:2},{value:"<strong>1. <code>DocTypeController.update_data()</code></strong>",id:"1-doctypecontrollerupdate_data",level:3},{value:"<strong>2. <code>DynamicDataOperation.update_table_value()</code></strong>",id:"2-dynamicdataoperationupdate_table_value",level:3},{value:"Example Payload",id:"example-payload",level:2},{value:"Update Using Conditions",id:"update-using-conditions",level:3}];function l(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"updating-a-document",children:"Updating a Document"})}),"\n",(0,t.jsxs)(n.p,{children:["This section explains the backend processes, schemas, and functions involved in updating a document (record) in a ",(0,t.jsx)(n.strong,{children:"DocType"})," in the ",(0,t.jsx)(n.strong,{children:"Panorah Framework"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"backend-schemas-used",children:"Backend Schemas Used"}),"\n",(0,t.jsx)(n.h3,{id:"1-updatedatarequestschema",children:(0,t.jsxs)(n.strong,{children:["1. ",(0,t.jsx)(n.code,{children:"UpdateDataRequestSchema"})]})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),":",(0,t.jsx)(n.br,{}),"\n","Defines the structure for updating a document."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fields"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"table_name"})}),": The name of the DocType (table) where the data will be updated."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"payload"})}),": A dictionary containing the updated field names and their new values."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"condition_dict"})}),": A dictionary specifying the conditions to identify which records to update."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-datafetchresponseschema",children:(0,t.jsxs)(n.strong,{children:["2. ",(0,t.jsx)(n.code,{children:"DataFetchResponseSchema"})]})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),":",(0,t.jsx)(n.br,{}),"\n","Defines the structure of the response after updating data."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fields"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"status"})}),": Indicates success or failure of the operation."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"message"})}),": Describes the outcome."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"data"})}),": Contains additional information about the updated records, if applicable."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"backend-functions-used",children:"Backend Functions Used"}),"\n",(0,t.jsx)(n.h3,{id:"1-doctypecontrollerupdate_data",children:(0,t.jsxs)(n.strong,{children:["1. ",(0,t.jsx)(n.code,{children:"DocTypeController.update_data()"})]})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),":",(0,t.jsx)(n.br,{}),"\n","Handles the update request and orchestrates the update process."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Key Steps"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Validates and extracts the ",(0,t.jsx)(n.code,{children:"table_name"}),", ",(0,t.jsx)(n.code,{children:"payload"}),", and ",(0,t.jsx)(n.code,{children:"condition_dict"})," from the request."]}),"\n",(0,t.jsxs)(n.li,{children:["Delegates the update operation to ",(0,t.jsx)(n.code,{children:"DynamicDataOperation.update_table_value()"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-dynamicdataoperationupdate_table_value",children:(0,t.jsxs)(n.strong,{children:["2. ",(0,t.jsx)(n.code,{children:"DynamicDataOperation.update_table_value()"})]})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),":",(0,t.jsx)(n.br,{}),"\n","Executes the update operation on the database."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Key Responsibilities"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Resolves the ORM model for the specified ",(0,t.jsx)(n.code,{children:"table_name"})," using ",(0,t.jsx)(n.code,{children:"PiccoloHelper.get_table_class()"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Builds database filters from the ",(0,t.jsx)(n.code,{children:"condition_dict"})," to identify matching records."]}),"\n",(0,t.jsxs)(n.li,{children:["Updates parent records using the provided ",(0,t.jsx)(n.code,{children:"payload"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"If the DocType has child tables, updates related child records recursively."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Key Steps"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Build Filters"}),":",(0,t.jsx)(n.br,{}),"\n","Constructs filters from the ",(0,t.jsx)(n.code,{children:"condition_dict"})," to identify the records to update."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Update Parent Records"}),":",(0,t.jsx)(n.br,{}),"\n","Updates the parent table using the provided ",(0,t.jsx)(n.code,{children:"payload"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Update Child Records"})," (if applicable):",(0,t.jsx)(n.br,{}),"\n","Loops through child records in the ",(0,t.jsx)(n.code,{children:"payload"})," and updates them with a reference to their parent."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"example-payload",children:"Example Payload"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "table_name": "",\r\n  "payload": null,\r\n  "condition_dict": null\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"update-using-conditions",children:"Update Using Conditions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "table_name": "Invoice",\r\n  "payload": {\r\n    "customer_name": "Jane Doe",\r\n    "total_amount": 2000.00\r\n  },\r\n  "condition_dict": {\r\n    "invoice_id": 123\r\n  }\r\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var t=s(6540);const d={},i=t.createContext(d);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);