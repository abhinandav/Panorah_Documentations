"use strict";(self.webpackChunkpanorah_documentation=self.webpackChunkpanorah_documentation||[]).push([[749],{2860:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var i=s(4848),r=s(8453);const a={title:"schema.py",sidebar_position:4},t="Schema Module Overview",c={id:"architecture/Api/doctype/schema",title:"schema.py",description:"The schema.py file in the Panorah Framework defines a set of schemas that serve as data models for validating and organizing data passed to and from the framework's components. It utilizes msgspec.Struct for its schemas, enabling efficient, type-safe, and structured data validation.",source:"@site/docs/architecture/Api/doctype/schema.md",sourceDirName:"architecture/Api/doctype",slug:"/architecture/Api/doctype/schema",permalink:"/docs/architecture/Api/doctype/schema",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/architecture/Api/doctype/schema.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"schema.py",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"dao.py",permalink:"/docs/architecture/Api/doctype/dao"},next:{title:"dto.py",permalink:"/docs/architecture/Api/doctype/dto"}},d={},l=[{value:"Why Use <code>Struct</code> for Schema Definitions?",id:"why-use-struct-for-schema-definitions",level:2},{value:"<strong>1. Type Safety</strong>",id:"1-type-safety",level:3},{value:"<strong>2. Performance</strong>",id:"2-performance",level:3},{value:"<strong>3. Data Validation</strong>",id:"3-data-validation",level:3},{value:"<strong>4. Lightweight and Clean</strong>",id:"4-lightweight-and-clean",level:3},{value:"Key Responsibilities of <code>schema.py</code>",id:"key-responsibilities-of-schemapy",level:2},{value:"<strong>1. DocType Management Schemas</strong>",id:"1-doctype-management-schemas",level:3},{value:"<strong>2. CRUD Operation Schemas</strong>",id:"2-crud-operation-schemas",level:3},{value:"<strong>3. Policy Management Schemas</strong>",id:"3-policy-management-schemas",level:3},{value:"<strong>4. Filtering and Joining Schemas</strong>",id:"4-filtering-and-joining-schemas",level:3},{value:"<strong>5. Table Alteration Schemas</strong>",id:"5-table-alteration-schemas",level:3},{value:"<strong>6. File Handling Schemas</strong>",id:"6-file-handling-schemas",level:3},{value:"Benefits of This Approach",id:"benefits-of-this-approach",level:2},{value:"<strong>Consistency</strong>",id:"consistency",level:3},{value:"<strong>Reusability</strong>",id:"reusability",level:3},{value:"<strong>Validation and Error Prevention</strong>",id:"validation-and-error-prevention",level:3},{value:"<strong>Maintainability</strong>",id:"maintainability",level:3},{value:"Example: Using a Schema",id:"example-using-a-schema",level:2}];function o(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"schema-module-overview",children:"Schema Module Overview"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"schema.py"})," file in the ",(0,i.jsx)(n.strong,{children:"Panorah Framework"})," defines a set of schemas that serve as data models for validating and organizing data passed to and from the framework's components. It utilizes ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"msgspec.Struct"})})," for its schemas, enabling efficient, type-safe, and structured data validation."]}),"\n",(0,i.jsxs)(n.h2,{id:"why-use-struct-for-schema-definitions",children:["Why Use ",(0,i.jsx)(n.code,{children:"Struct"})," for Schema Definitions?"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Struct"})," class from the ",(0,i.jsx)(n.strong,{children:"msgspec"})," library offers several advantages for defining schemas:"]}),"\n",(0,i.jsx)(n.h3,{id:"1-type-safety",children:(0,i.jsx)(n.strong,{children:"1. Type Safety"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Each schema explicitly defines the type of its fields, reducing runtime errors by catching type mismatches during validation."}),"\n",(0,i.jsxs)(n.li,{children:["Fields like ",(0,i.jsx)(n.code,{children:"str"}),", ",(0,i.jsx)(n.code,{children:"int"}),", ",(0,i.jsx)(n.code,{children:"list"}),", and enums like ",(0,i.jsx)(n.code,{children:"FieldTypeEnums"})," ensure only valid data is passed to the framework."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-performance",children:(0,i.jsx)(n.strong,{children:"2. Performance"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"msgspec.Struct"})," is designed to be fast and efficient. Compared to other serialization or validation libraries like ",(0,i.jsx)(n.code,{children:"Pydantic"}),", it minimizes overhead and improves performance."]}),"\n",(0,i.jsxs)(n.li,{children:["Ideal for high-performance frameworks like ",(0,i.jsx)(n.strong,{children:"Panorah"}),", where speed is critical."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-data-validation",children:(0,i.jsx)(n.strong,{children:"3. Data Validation"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Automatically enforces field types and validates input data. For example:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Fields like ",(0,i.jsx)(n.code,{children:"FieldTypeEnums"})," ensure only valid enum values are accepted."]}),"\n",(0,i.jsxs)(n.li,{children:["Optional fields (",(0,i.jsx)(n.code,{children:"None"})," values) are clearly specified using union types (e.g., ",(0,i.jsx)(n.code,{children:"str | None"}),")."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"4-lightweight-and-clean",children:(0,i.jsx)(n.strong,{children:"4. Lightweight and Clean"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Compared to verbose class definitions in other libraries, ",(0,i.jsx)(n.code,{children:"Struct"})," provides a clean and lightweight approach to defining schemas."]}),"\n",(0,i.jsx)(n.li,{children:"Default values can be defined concisely, making the schema easy to read and maintain."}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"key-responsibilities-of-schemapy",children:["Key Responsibilities of ",(0,i.jsx)(n.code,{children:"schema.py"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"schema.py"})," file defines schemas that are used across various modules of the framework, ensuring data integrity and consistency. Here\u2019s a breakdown:"]}),"\n",(0,i.jsx)(n.h3,{id:"1-doctype-management-schemas",children:(0,i.jsx)(n.strong,{children:"1. DocType Management Schemas"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"FieldsSchema"})}),":",(0,i.jsx)(n.br,{}),"\n","Defines the fields for a ",(0,i.jsx)(n.code,{children:"DocType"}),", specifying attributes like name, type, label, and options."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"DocTypeRequestSchema"})}),":",(0,i.jsx)(n.br,{}),"\n","Represents a request for creating or managing a ",(0,i.jsx)(n.code,{children:"DocType"}),", including its fields and properties like ",(0,i.jsx)(n.code,{children:"is_tree"})," and ",(0,i.jsx)(n.code,{children:"is_submittable"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"DocTypeResponseSchema"})}),":",(0,i.jsx)(n.br,{}),"\n","Standardized structure for responses related to ",(0,i.jsx)(n.code,{children:"DocType"})," operations."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-crud-operation-schemas",children:(0,i.jsx)(n.strong,{children:"2. CRUD Operation Schemas"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"InsertDataRequestSchema"})})," and ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"UpdateDataRequestSchema"})}),":",(0,i.jsx)(n.br,{}),"\n","Define the structure for inserting or updating data in a table, including payloads and conditions."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"DataFetchResponseSchema"})}),":",(0,i.jsx)(n.br,{}),"\n","Returns fetched data with a status and message."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-policy-management-schemas",children:(0,i.jsx)(n.strong,{children:"3. Policy Management Schemas"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"PolicyRequestSchema"})}),":",(0,i.jsx)(n.br,{}),"\n","Specifies attributes for defining policies, such as subject, resource, and action."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"PolicyResponseSchema"})}),":",(0,i.jsx)(n.br,{}),"\n","Standardized structure for responses related to policy operations."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"4-filtering-and-joining-schemas",children:(0,i.jsx)(n.strong,{children:"4. Filtering and Joining Schemas"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"FilterRequestSchema"})}),":",(0,i.jsx)(n.br,{}),"\n","Specifies filtering criteria for data retrieval, including sorting, pagination, and filters."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"FilterFetchResponseSchema"})}),":",(0,i.jsx)(n.br,{}),"\n","Returns filtered data with a status and message."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"JoinTableRequestSchema"})}),":",(0,i.jsx)(n.br,{}),"\n","Represents the structure for joining tables."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"5-table-alteration-schemas",children:(0,i.jsx)(n.strong,{children:"5. Table Alteration Schemas"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"AlterTableRequestSchema"})}),", ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"AlterColumnNameRequestSchema"})}),", ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"AddColumnRequestSchema"})}),", and ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"DeleteColumnRequestSchema"})}),":",(0,i.jsx)(n.br,{}),"\n","Handle schema changes for tables, including column additions, deletions, and renaming."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"6-file-handling-schemas",children:(0,i.jsx)(n.strong,{children:"6. File Handling Schemas"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"FileUploadRequestSchema"})}),":",(0,i.jsx)(n.br,{}),"\n","Validates file uploads with ",(0,i.jsx)(n.code,{children:"UploadFile"})," support."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"FileUploadResponseSchema"})}),":",(0,i.jsx)(n.br,{}),"\n","Standardized structure for responses related to file uploads."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"benefits-of-this-approach",children:"Benefits of This Approach"}),"\n",(0,i.jsx)(n.h3,{id:"consistency",children:(0,i.jsx)(n.strong,{children:"Consistency"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Standardizes how data is represented and passed across the framework."}),"\n",(0,i.jsx)(n.li,{children:"Ensures that all modules interacting with the same data use a common structure."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"reusability",children:(0,i.jsx)(n.strong,{children:"Reusability"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Schemas are reusable across multiple modules and functions, reducing duplication."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"validation-and-error-prevention",children:(0,i.jsx)(n.strong,{children:"Validation and Error Prevention"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Invalid data is caught early through type checking and validation, reducing runtime errors."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"maintainability",children:(0,i.jsx)(n.strong,{children:"Maintainability"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The schema definitions are easy to extend and maintain, allowing for future changes without significant refactoring."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example-using-a-schema",children:"Example: Using a Schema"}),"\n",(0,i.jsx)(n.p,{children:"Here\u2019s an example of how these schemas integrate into the framework:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from src.panorah_framework.api.doctype.schema import DocTypeRequestSchema\r\n\r\n\r\ndoc_type_data = {\r\n    "app": "Sales",\r\n    "doc_type_name": "Invoice",\r\n    "fields": [\r\n        {"name": "invoice_id", "field_type": "Int", "label": "Invoice ID"},\r\n        {"name": "customer_name", "field_type": "Data", "label": "Customer Name"},\r\n    ],\r\n    "is_tree": 0,\r\n    "is_submittable": 1,\r\n}\r\n\r\n# Validate the data\r\ndoc_type_request = DocTypeRequestSchema(**doc_type_data)\r\nprint(doc_type_request)\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var i=s(6540);const r={},a=i.createContext(r);function t(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);